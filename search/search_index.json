{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simple-CDD-YAML","text":"<p>Welcome to the documentation of Simple-CDD-YAML!</p> <p>Simple-CDD-YAML is a preprocesser for Simple-CDD using <code>YAML</code> recipe files, as inspired by debos.</p> <p>Have a look at the introduction to get a quick idea of what Simple-CDD-YAML is and what it can do.</p> <p>To get going, follow the instructions in getting started. Instructions for building and testing images are provided in the section build images</p> <p>The examples page features a simple example of a <code>YAML</code> recipe.</p> <p>Each <code>YAML</code> recipe consists of a series of actions, all of which are documented under actions.</p> <p>Refer to the code reference to query actual source code and see implementation details.</p>"},{"location":"examples/","title":"Examples","text":"<p>Examples of working recipes can be found in simple-cdd-yam-recipes.</p>"},{"location":"examples/#example-recipe-base","title":"Example recipe <code>base</code>","text":"<p>The simplest recipe that simple-cdd-yam-recipes features is the recipe <code>base</code>, which is shown below.</p> <p>The recipe consists of:</p> <ul> <li>A series of variables with default values, which can be overridded when   including this recipe in another recipe. Variables are used throughout the recipe using the <code>jinja2</code> notation <code>{{variable}}</code>.</li> <li>Profile name definition.</li> <li>A series of actions:<ul> <li><code>recipe</code> action. Include another recipe, where some variables are being   overridden.</li> <li><code>conf</code> action: Set simple-CDD variables and environment variables.</li> <li><code>preseed</code> action: The Debian-CD configuration is controlled via preseed.   files. Here, a template is used in which variables are substituted.</li> <li><code>apt</code> action: Install Debian packages.</li> <li><code>run</code> action (<code>script</code>): Runs a script. Note that variables in the script   also might get substituted.</li> <li><code>run</code> action (<code>command</code>): Runs a command.</li> <li><code>overlay</code> action: Deploys the contents of a give directory onto the   system. This can be done by <code>root</code> (default) or by a given user.</li> </ul> </li> <li>Also note that it's possible to include more complex behavior using <code>jinja2</code>,   such as if-statements as shown in this example.</li> </ul> base.yaml<pre><code>{% set locale=locale or \"en_US\" -%}\n{% set keyboard=keyboard or \"us\" -%}\n{% set profile=profile or \"base\" -%}\n{% set mirror_components=mirror_components or \"main\" -%}\n{% set disk_type=disk_type or \"DVD\" -%}\n{% set dist=dist or \"bookworm\" -%}\n{% set mirror=mirror or \"http://ftp.de.debian.org/debian/\" -%}\n{% set username=username or \"user\" -%}\n{% set user_fullname=user_fullname or \"User\" -%}\n{% set user_password=user_password or \"user\" -%}\n{% set root_password=root_password or \"root\" -%}\n{% set hostname=hostname or \"base\" -%}\n{% set domain_name=domain_name or \"domain\" -%}\n{% set debos=debos or false %}\n\nprofile: {{profile}}\n\nactions:\n  - action: recipe\n    description: Recipe with debos steps\n    recipe: recipes/debos.yaml\n    variables:\n      dist: {{dist}}\n      username: {{username}}\n\n  - action: conf\n    description: Simple-CDD configuration settings\n    variables:\n      locale: {{locale}}\n      keyboard: {{keyboard}}\n      profiles: {{profile}}\n      auto_profiles: {{profile}}\n      mirror_components: {{mirror_components}}\n    env_variables:\n      DISKTYPE: {{disk_type}}\n      CODENAME: {{dist}}\n      DEBIAN_MIRROR: {{mirror}}\n\n  - action: preseed\n    description: Basic preseed file for minimum Debian system with EFI boot\n    preconf: preseeds/base-preseed.txt\n    variables:\n      user_fullname: {{user_fullname}}\n      username: {{username}}\n      user_password: {{user_password}}\n      root_password: {{root_password}}\n      hostname: {{hostname}}\n      domain: {{domain_name}}\n\n  - action: apt\n    description: Base packages\n    packages:\n      - adduser\n      - apparmor\n      - apt\n      - apt-transport-https\n      - apt-utils\n      - busybox\n      - ca-certificates\n      - dirmngr\n      - dos2unix\n      - dbus-user-session\n      - gnupg\n      - initramfs-tools\n      - iptables\n      - lsb-release\n      - openssh-server\n      - sudo\n      - systemd\n      - systemd-timesyncd\n      - unattended-upgrades\n      - zstd\n\n  - action: run\n    description: Add {{username}} to sudoers\n    variables:\n      username: {{username}}\n    script: scripts/add_sudoer.sh\n\n  - action: run\n    description: Add {{username}} to several groups\n    variables:\n      username: {{username}}\n      groups:\n        - admin\n        - adm\n        - dialout\n        - cdrom\n        - plugdev\n        - power\n        - audio\n        - dip\n        - video\n        - staff\n        - shared\n        - sudo\n    script: scripts/setup_user_groups.sh\n\n{% if not debos %}\n\n  - action: run\n    description: Make sure debian UEFI file is registered as boot entry\n    command: grub-install --efi-directory /boot/efi --force-extra-removable --recheck &amp;&amp; update-grub\n\n  - action: run\n    description: Configure grub (output and no menu shown)\n    script: scripts/configure_grub.sh\n\n{% endif%}\n\n  - action: overlay\n    description: Bash settings for {{username}}\n    user: {{username}}\n    source: overlays/bash-settings\n\n  - action: overlay\n    description: Bash settings for root\n    user: root\n    source: overlays/bash-settings\n</code></pre>"},{"location":"getting_started/","title":"Getting started","text":"<p>This page will guide you through the process of installing Simple-CDD-YAML and generating a Simple-CDD profile from a YAML recipe.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Install Simple-CDD-YAML according to the installation instructions.</p>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>Now that Simple-CDD-YAML is installed, the command <code>simple-cdd-yaml</code> should be available. Make sure the appropriate environment (in which <code>simple-cdd-yaml</code> is installed) has been activated prior to issuing this command.  You can test it out, by querying the help:</p> <pre><code>simple-cdd-yaml --help\n</code></pre> <p>This should result in the following output:</p> <pre><code>usage: simple-cdd-yaml [-h] --recipe RECIPE [--profile PROFILE] \n       [--output OUTPUT] [--input INPUT] [--debos] \n       [--debos-output DEBOS_OUTPUT] [--vars key1=value1,key2=value2,...]\n\nGenerate simple-cdd profiles using YAML input\n\noptions:\n  -h, --help            show this help message and exit\n  --recipe RECIPE       set the config yaml file\n  --profile PROFILE     profile name\n  --output OUTPUT       profile output directory (default: .)\n  --input INPUT         recipe/action working directory (default: .)\n  --debos               if provided, try to generate a debos recipe instead\n  --debos-output DEBOS_OUTPUT\n                        debos recipe output directory (default: ./debos)\n  --vars key1=value1,key2=value2,...\n                        override root recipe variables\n</code></pre>"},{"location":"getting_started/#building-a-simple-cdd-profile","title":"Building a Simple-CDD profile","text":"<p>In order to build a profile from a given recipe file <code>&lt;recipe-name&gt;.yaml</code>, located in the subdirectory <code>recipe</code>, issue:</p> <pre><code>simple-cdd-yaml --recipe recipe/&lt;recipe-name&gt;.yaml\n</code></pre> <p>Make sure the appropriate environment (in which <code>simple-cdd-yaml</code> is installed) has been activated prior to issuing this command. Alternatively, you can prepend the environment activation (here called <code>&lt;simple-cdd-yaml-venv&gt;</code>):</p> <pre><code>( . ~/.venv/&lt;simple-cdd-yaml-venv&gt;/bin/activate &amp;&amp; \\\n    simple-cdd-yaml --recipe recipe/&lt;recipe-name&gt;.yaml )\n</code></pre> <p>Note that the commands are wrapped in parentheses <code>( ... )</code> in order to assure that the commands run in an isolated shell.</p>"},{"location":"getting_started/#results","title":"Results","text":"<p>After a successful build, a <code>profiles</code> directory should become visible that contains the Simple-CDD outputs, all named after profile name <code>&lt;profile&gt;</code>, but with different extensions. These include:</p> <ul> <li><code>&lt;profile&gt;.preseed</code></li> <li><code>&lt;profile&gt;.packages</code></li> <li><code>&lt;profile&gt;.postinst</code></li> <li><code>&lt;profile&gt;.conf</code></li> <li><code>&lt;profile&gt;.extra</code></li> <li><code>&lt;profile&gt;.downloads</code></li> </ul> <p>The last file <code>&lt;profile&gt;.extra</code> contains references to additional files that are included into the profile. These are located in the directory <code>extra</code>. Finally, also a <code>debos</code> directory might appear, if you enabled the <code>debos</code> output option during profile build and included a corresponding action into the recipe.</p> <p>Visit the Simple-CDD repository or Howto to learn more about the contents of profile files and how to build an images from them using Simple-CDD.</p>"},{"location":"installation/","title":"Installation","text":"<p>It is recommended to install Simple-CDD-YAML into a dedicated environment (e.g. virtaulenv). After the environment has been activated, it can simply installed using <code>pip</code>:</p> <pre><code>pip install simple-cdd-yaml\n</code></pre> <p>Alternatively, Simple-CDD-YAML can be installed from source:</p> <pre><code>git clone https://github.com/swvanbuuren/simple-cdd-yaml.git\ncd simple-cdd-yaml\npip install .\n</code></pre>"},{"location":"installation/#usage","title":"Usage","text":"<p>Refer to the getting started to learn how to use Simple-CDD-YAML.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Simple-CDD-YAML uses YAML recipes to generate the profile files required by Simple-CDD. A recipe consists of actions, that generate or append files in the Simple-CDD profile.</p>"},{"location":"introduction/#what-is-this-simple-cdd-you-speak-of","title":"What is this \"Simple-CDD\" you speak of?","text":"<p>Simple-CDD is a limited, though relatively easy to use tool to create a customized DebianInstaller CD.</p> <p>It's a wrapper around debian-cd and mirroring tools used to create a customized DebianInstaller CD image. It takes a list of packages to install, and debconf pre-seeding files to pre-configure the installation. It has some support for multiple profiles and custom post-install scripts for things that can't be configured by debconf preseeding. </p>"},{"location":"introduction/#actions","title":"Actions","text":"<p>Simple-CDD-YAML features the following actions (for an exemplary profile called <code>&lt;profile&gt;</code>):</p> <ul> <li><code>recipe</code> action: embed another recipe</li> <li><code>conf</code> action: compose a <code>&lt;profile&gt;.conf</code> file by supplying (environment)   variables</li> <li><code>preseed</code> action: define a preseed file</li> <li><code>apt</code> action: add packages</li> <li><code>run</code> action: add a command or script (to <code>&lt;profile&gt;.postinst</code>)</li> <li><code>overlay</code> action: add an overlay (an overlay is a file structure that is   compressed into one single file and automatically added to the file   <code>&lt;profile&gt;.extra</code>. A corresponding command to decompress the overlay is added   to <code>&lt;profile&gt;.postinst</code>)</li> <li><code>extra</code> action: add extra file</li> <li><code>downloads</code> action: add extra packages</li> <li><code>debos</code> action: [only in debos mode] add pre- and post-action to debos recipe   output</li> </ul> <p>Some of the actions support substitutions using jinja notation, making it easier to reuse scripts, preseeds and recipes. By defining variables with default values at the top of a recipe it becomes easy to reuse and nest recipes.</p> <p>A few actions also support different roles: by default scripts are executed and overlays are deployed as root, but you can also specify to have this done by a given user.</p> <p>Visit the Actions section to learn how to write actions and see what they are capable of.</p>"},{"location":"introduction/#next-steps","title":"Next steps","text":"<p>Refer to getting started to install Simple-CDD-YAML, create a profile from a YAML recipe and build an image using Simple-CDD.</p> <p>Vist code reference to learn more about the implementation and underlying code of Simple-CDD-YAML.</p>"},{"location":"actions/","title":"Actions","text":"<p>This section documents each action type that Simple-CDD-YAML is able to use in <code>YAML</code> recipes.</p>"},{"location":"actions/#usage","title":"Usage","text":"<p>Actions are listed under the root level <code>actions</code> keyword, which usually appears after the variables and profile name definition:</p> <pre><code>{% set profile=profile or \"base\" -%} # (1)!\n\nprofile: {{profile}} # (2)!\n\nactions:\n  action: recipe\n    description: ...\n</code></pre> <ol> <li>Note the value <code>profile or \"base\"</code>. This assigns the default value <code>base</code> to    the variable <code>profile</code>. When defining a variable, it's recommended to set a    default value.</li> <li>Here, the value of the variable <code>profile</code> is substituted as profile name.</li> </ol>"},{"location":"actions/#implementation","title":"Implementation","text":"<p>All actions inherit from the <code>Action</code> class.</p>"},{"location":"actions/#simple_cdd_yaml.actions.Action","title":"<code>Action</code>","text":"<p>Abstract action base class</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class Action:\n    \"\"\" Abstract action base class \"\"\"\n    action_out = None\n\n    def __init__(self, args_dict):\n        self.profile = args_dict['profile']\n        self.input_dir = pl.Path(args_dict['input'])\n        self.output_dir = pl.Path(args_dict['output'])\n        self.debos = args_dict['debos']\n        self.debos_output_dir = pl.Path(args_dict['debos_output']) / self.profile\n        self.result = {\n            'architecture': '',\n            'chroot_default': False,\n            'actions': [], \n            'pre-actions': [], \n            'post-actions': [],\n        }\n\n    @staticmethod\n    def _print(text, header=None, width=68):\n        \"\"\" Print text wrapped \"\"\"\n        initial_indent = ' '\n        if header:\n            print(f' {header}')\n            initial_indent = '  '\n        wrapped_text = textwrap.wrap(\n            text,\n            width=width,\n            initial_indent=initial_indent,\n            subsequent_indent='  ',\n            break_on_hyphens=False,\n        )\n        print('\\n'.join(wrapped_text))\n\n    def _action_inform(self, props):\n        \"\"\" Inform on action start action status \"\"\"\n        if action_type := props.get('action'):\n            print(f' {action_type} action '.upper().center(70, '='))\n        if description := props.get('description'):\n            self._print(f'Description: {description}')\n        for src_file in ('recipe', 'preconf', 'source', 'command', 'script'):\n            if src := props.get(src_file):\n                self._print(f'{src_file.capitalize()}: {src}')\n\n    def _read_substitute(self, filename, substitutions):\n        \"\"\" Read string from file and perform jinja2 substitutions \"\"\"\n        input_file = self.input_dir / filename\n        with open(input_file, mode='r', encoding='utf-8') as file:\n            template = jinja2.Template(file.read())\n        return template.render(substitutions)\n\n    def _write_action(self, string, extension, directory='profiles',\n                      no_duplicate=False):\n        \"\"\" Append string to profile file \"\"\"\n        filename = self.profile + '.' + extension\n        output_file = self.output_dir / directory / filename\n        if no_duplicate and output_file.is_file():\n            with open(output_file, mode='r', encoding='utf-8') as file:\n                if string in file.read():\n                    return\n        with open(output_file, mode='a', encoding='utf-8') as file:\n            file.write(string)\n\n    def perform_action(self, props):\n        \"\"\" Perform the action specific tasks and return result \"\"\"\n        raise NotImplementedError('Action is an abstract base class!')\n\n    def perform_debos_action(self, props):\n        \"\"\" Process debos action specific tasks and return result \"\"\"\n        raise NotImplementedError('Action is an abstract base class!')\n\n    def execute(self, props):\n        \"\"\" Execute an action \"\"\"\n        self._action_inform(props)\n        if self.debos:\n            result = self.perform_debos_action(props)\n        else:\n            result = self.perform_action(props)\n        if result:\n            if not self.action_out:\n                self.action_out = props['action']\n            self._write_action(result, self.action_out)\n\n    def append_result(self, new_result: dict, key='actions'):\n        \"\"\" Append a new result to the result list \"\"\"\n        added_result = copy.deepcopy(new_result)\n        self.result[key].append(added_result)\n\n    def extend_result(self, new_result: dict, key='actions'):\n        \"\"\" Append a new result to the result list \"\"\"\n        added_result = copy.deepcopy(new_result)\n        self.result[key].extend(added_result)\n\n    def prepend_result(self, new_result: dict, key='actions'):\n        \"\"\" Prepend a new result to the result list \"\"\"\n        added_result = copy.deepcopy(new_result)\n        self.result[key].insert(0, added_result)\n\n    def combine_results(self, result):\n        \"\"\" Combine two result sets \"\"\"\n        for key in ('actions', 'pre-actions', 'post-actions'):\n            self.result[key].extend(result[key])\n        for option in ('architecture', 'chroot_default'):\n            if result.get(option):\n                self.result[option] = result[option]\n\n    def unique_filename(self, base='script', ext='sh', description=None):\n        \"\"\" Create a name from description or using uuid \"\"\"\n        name = base + '_'\n        if description:\n            name += description.lower()\n        else:\n            name += str(uuid.uuid4().hex)\n        return \"\".join([x if x.isalnum() else \"_\" for x in name]) + '.' + ext\n</code></pre>"},{"location":"actions/apt/","title":"Apt Action","text":"<p>The <code>apt</code> action defines the contents of <code>&lt;profile&gt;.packages</code> file, which basically is a list of to be installed packages.</p>"},{"location":"actions/apt/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Apt Action<pre><code>actions:\n  - action: apt\n    description: Base packages #(1)!\n    packages: # (2)! \n      - adduser\n      - apparmor\n      - apt\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Required] List of packages</li> </ol>"},{"location":"actions/apt/#implementation","title":"Implementation","text":""},{"location":"actions/apt/#simple_cdd_yaml.actions.PreseedAction","title":"<code>PreseedAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Preseed action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class PreseedAction(Action):\n    \"\"\" Preseed action \"\"\"\n    def perform_action(self, props):\n        return self._read_substitute(props['preconf'],\n                                     props.get('variables', {}))\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"actions/conf/","title":"Conf Action","text":"<p>The <code>conf</code> action defines the contents of the <code>&lt;profile&gt;.conf</code> file. This file contains normal variables and environment variables.</p> <p>Tip</p> <p>Have a look at the source code of Simple-CDD on variables, to see which variables and environment variables are supported.</p>"},{"location":"actions/conf/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Conf Action<pre><code>{% set profile=profile or \"base\" -%}\n{% set mirror_components=mirror_components or \"main\" -%}\n{% set disk_type=disk_type or \"DVD\" -%}\n{% set dist=dist or \"bookworm\" -%}\n\n  - action: conf\n    description: Simple-CDD configuration settings # (1)!\n    variables: # (2)!\n      profiles: {{profile}}\n      auto_profiles: {{profile}}\n      mirror_components: {{mirror_components}}\n    env_variables: # (3)!\n      DISKTYPE: {{disk_type}}\n      CODENAME: {{dist}}\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Optional] Variable definitions</li> <li>[Optional] Environment variable definitions</li> </ol>"},{"location":"actions/conf/#implementation","title":"Implementation","text":""},{"location":"actions/conf/#simple_cdd_yaml.actions.ConfAction","title":"<code>ConfAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Conf action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class ConfAction(Action):\n    \"\"\" Conf action \"\"\"\n\n    @staticmethod\n    def _handle_value(value):\n        \"\"\" Remove trailing spaces and make sure values are strings \"\"\"\n        if isinstance(value, str):\n            return value.rstrip()\n        return ''\n\n    def perform_action(self, props):\n        description = props.get('description', 'Conf settings')\n        conf_str = f'# {description}\\n'\n        if variables := props.get('variables'):\n            for var, value in variables.items():\n                conf_str += f'{var}=\"{self._handle_value(value)}\"\\n'\n        if env_variables := props.get('env_variables'):\n            for var, value in env_variables.items():\n                conf_str += f'export {var}=\"{self._handle_value(value)}\"\\n'\n        if variables or env_variables:\n            return conf_str\n        return None\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"actions/debos/","title":"Debos Action","text":"<p>The debos action is a special action that allows to generate a Debos version of the Simple-CDD-YAML recipe. A Debos is only generated, when the user adds the option <code>--debos</code> when issuing the <code>simple-cdd-yaml</code> command.</p> <p>Info</p> <p>Only <code>overlay</code> and <code>run</code> actions are included in the debos recipe.</p>"},{"location":"actions/debos/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Debos Action<pre><code>{% set architecture=architecture or \"amd64\" -%}\n\nactions:\n  - action: debos\n    description: Debos recipe export settings and actions #(1)!\n    architecture: {{ architecture }} #(2)!\n    chroot_default: true #(3)!\n    pre-actions: #(4)!\n      ...\n\n    post-actions: #(5)!\n      ...\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Required] Architecture for which the Debos recipe should be generated</li> <li>[Optional] Whether the actions should be executed in the target    filesystem. This is option is only added to Simple-CDD-YAML actions, if the    keyword <code>chroot</code> isn't set.</li> <li>[Required] Debos specific actions that should be included before the    Simple-CDD-YAML recipe.</li> <li>[Required] Debos specific actions that should be included after the    Simple-CDD-YAML recipe.</li> </ol>"},{"location":"actions/debos/#implementation","title":"Implementation","text":""},{"location":"actions/debos/#simple_cdd_yaml.actions.DebosAction","title":"<code>DebosAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Debos action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class DebosAction(Action):\n    \"\"\" Debos action \"\"\"\n    def __init__(self, args_dict):\n        super().__init__(args_dict)\n        self.args_dict = args_dict\n        self.actions = {\n            'overlay': OverlayAction,\n            'run': RunAction,\n        }\n\n    def create_action(self, action_type, args):\n        \"\"\" Create a new action \"\"\"\n        try:\n            return self.actions[action_type](args)\n        except KeyError:\n            return None\n\n    def process_actions(self, action_list, action_key):\n        \"\"\" Process given list of actions \"\"\"\n        for action_props in action_list:\n            action_type = action_props['action']\n            action = self.create_action(action_type, self.args_dict)\n            if action:\n                action.execute(action_props)\n                self.extend_result(action.result['actions'], key=action_key)\n            else:\n                self.append_result(action_props, key=action_key)\n\n    def perform_action(self, props):\n        return None\n\n    def perform_debos_action(self, props):\n        for option in ('architecture', 'chroot_default'):\n            self.result[option] = props[option]    \n        for debos_action_type in ('pre-actions', 'post-actions'):\n            self.process_actions(props[debos_action_type], debos_action_type)\n</code></pre>"},{"location":"actions/downloads/","title":"Downloads Action","text":"<p>The <code>downloads</code> action includes additional packages to <code>&lt;profile&gt;.downloads</code>. These packages aren't installed by default during the installation, but are still included on the installation CD. This might be useful to include package dependencies, which for some reason aren't deduced properly. The installer will query these packages, whenever it encounters a missing package dependency.</p>"},{"location":"actions/downloads/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Downloads Action<pre><code>actions:\n  - action: downloads\n    description: Additional packages #(1)!\n    packages: # (2)! \n      - usbutils\n      - acpi\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Required] List of packages</li> </ol>"},{"location":"actions/downloads/#implementation","title":"Implementation","text":""},{"location":"actions/downloads/#simple_cdd_yaml.actions.DownloadsAction","title":"<code>DownloadsAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Downloads action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class DownloadsAction(Action):\n    \"\"\" Downloads action \"\"\"\n    def perform_action(self, props):\n        description = props.get('description', 'Additional packages')\n        pkg_list = props['packages']\n        self._print(' '.join(pkg_list), header='Extra packages:')\n        downloads_pkg_list = '\\n'.join(pkg_list)\n        return f'# {description}\\n{downloads_pkg_list}\\n'\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"actions/extra/","title":"ExtraAction","text":"<p>The <code>extra</code> action includes extra files for the installation. Files are registered in <code>&lt;profile&gt;.extra</code> and copied to the <code>extra</code> directory.</p>"},{"location":"actions/extra/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Extra Action<pre><code>actions:\n  - action: extra\n    description: Extra files #(1)!\n    files: # (2)! \n      - path/to/file\n      - path/to/another-file\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Required] List of file paths</li> </ol>"},{"location":"actions/extra/#implementation","title":"Implementation","text":""},{"location":"actions/extra/#simple_cdd_yaml.actions.ExtraAction","title":"<code>ExtraAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Extra action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class ExtraAction(Action):\n    \"\"\" Extra action \"\"\"\n    def perform_action(self, props):\n        description = props.get('description', 'Extra files')\n        self._write_action(f'# {description}\\n', extension='extra')\n        extra_files = []\n        for file in props['files']:\n            src = pl.Path(file)\n            dst = self.output_dir / 'extra' / src.name\n            shutil.copyfile(src, dst)\n            extra_files.append('extra/' + src.name)\n        self._print(' '.join(extra_files), header='Extra files:')\n        return '\\n'.join(extra_files) + '\\n'\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"actions/overlay/","title":"Overlay Action","text":"<p>The <code>overlay</code> action allows to overlay a file structure into the root file system at the end of the installation. The corresponding command that takes care of this is appended to <code>&lt;profile&gt;.postinst</code>. Corresponding archives that contain the overlays are copied to the <code>extra</code> folder and are registered in <code>&lt;profile&gt;.extra</code>. By default the overlay will be copied by root, but it's also possible to have a user do this.</p>"},{"location":"actions/overlay/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Overlay Action<pre><code>{% set username=username or \"user\" -%}\n\nactions:\n  - action: overlay\n    description: Bash settings for {{username}} #(1)!\n    user: {{username}} #(2)!\n    source: overlays/bash-settings #(3)!\n    destination: /home/{{username}}/ #(4)!\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Optional] User that performs the overlay actions. If omitted root is    used.</li> <li>[Required] Relative link to overlay file structure    <code>command</code> keyword.</li> <li>[Optional] Destination where the overlay file structure is copied to. If     <code>destination</code> and <code>user</code> are omitted, <code>/</code> is used. If <code>destination</code> is omitted but <code>user</code> is provided, <code>/home/{user}</code> is used.</li> </ol>"},{"location":"actions/overlay/#implementation","title":"Implementation","text":""},{"location":"actions/overlay/#simple_cdd_yaml.actions.OverlayAction","title":"<code>OverlayAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Overlay action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class OverlayAction(Action):\n    \"\"\" Overlay action \"\"\"\n    def __init__(self, args):\n        super().__init__(args)\n        self.overlay_template = jinja2.Template(OVERLAY_TEMPLATE_STR)\n\n    def source(self, props):\n        source = props['source']\n        if source.startswith('/'):\n            return pl.PurePath(source)\n        return pl.PurePath(self.input_dir / source)\n\n    def overlay_name(self, props):\n        overlay_name = props['source'].replace('/', '.')\n        if user := props.get('user'):\n            return f'{overlay_name}.{user}'\n        return overlay_name\n\n    def tar_filter(self, props):\n        if user := props.get('user'):\n            return OwnerTarFilter(user=user).tar_filter\n        return None\n\n    def destination(self, props):\n        \"\"\" If destination is provided, this overrules the user setting \"\"\"\n        if dest := props.get('destination'):\n            return dest\n        if user := props.get('user'):\n            if user == 'root':\n                return '/root/'\n            return f'/home/{user}/'\n        return '/'\n\n    def compress_overlay(self, props, output_dir):\n        \"\"\" Compress overlay into tarball \"\"\"\n        name = self.overlay_name(props)\n        filename = f'{self.profile}.{name}.tar.gz'\n        src = self.source(props)\n        tfilter = self.tar_filter(props)\n        with tarfile.open(output_dir / filename, \"w:gz\") as tar:\n            tar.add(src, arcname='', filter=tfilter)\n        dest = self.destination(props)\n        return filename, dest\n\n    def perform_action(self, props):\n        output_dir = self.output_dir / 'extra'\n        filename, destination = self.compress_overlay(props, output_dir)\n        self._write_action(f'extra/{filename}\\n', extension='extra',\n                           no_duplicate=True)\n        extract_commands = self.overlay_template.render(\n            description=props.get('description', 'Overlay'),\n            overlay=filename,\n            destination=destination,\n        )\n        self._write_action(extract_commands, extension='postinst')\n\n    def perform_debos_action(self, props):\n        output_dir = self.debos_output_dir / 'overlays'\n        filename, destination = self.compress_overlay(props, output_dir)\n        debos_action = dict(COMMAND_TEMPLATE_DICT,\n            description=props.get('description', 'Overlay'),\n            command=f'tar -xf $ARTIFACTDIR/overlays/{filename} -C $ROOTDIR{destination}'\n        )\n        self.append_result(debos_action)\n</code></pre>"},{"location":"actions/preseed/","title":"Preseed Action","text":"<p>The <code>preseed</code> action defines the contents of the <code>&lt;profile&gt;.preseed</code> file. This file will contain the preconfiguration for the Debian installer. The <code>preseed</code> action takes in a <code>jinja</code> template of the preseed file, in which chosen configuration parameters are replaced with <code>jinja</code> variables. Finally, it replaces the parameters with the provided substition variables.</p> <p>Tip</p> <p>Check out the Debian documentation on the contents of the preconfiguration file to learn more about the preseed file.</p>"},{"location":"actions/preseed/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Preseed Action<pre><code>{% set username=username or \"user\" -%}\n{% set user_fullname=user_fullname or \"User\" -%}\n\nactions:\n  - action: preseed\n    description: Basic preseed file for minimum Debian system with EFI boot #(1)!\n    preconf: preseeds/base-preseed.txt # (2)!\n    variables: # (3)! \n      user_fullname: {{user_fullname}}\n      username: {{username}}\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Required] Relative link to the preseed template file</li> <li>[Optional] Substition variables</li> </ol>"},{"location":"actions/preseed/#implementation","title":"Implementation","text":""},{"location":"actions/preseed/#simple_cdd_yaml.actions.PreseedAction","title":"<code>PreseedAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Preseed action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class PreseedAction(Action):\n    \"\"\" Preseed action \"\"\"\n    def perform_action(self, props):\n        return self._read_substitute(props['preconf'],\n                                     props.get('variables', {}))\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"actions/recipe/","title":"Recipe Action","text":"<p>The <code>recipe</code> action embeds another <code>YAML</code> recipe. This action offers the possibility to substitute variables in the recipe that will be embedded.</p>"},{"location":"actions/recipe/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Recipe Action<pre><code>{% set username=username or \"user\" -%}\n\nactions:\n  - action: recipe\n    description: Recipe that will be embedded # (1)!\n    recipe: recipes/recipe.yaml # (2)!\n    working_dir: upstream # (3)! \n    variables: # (4)! \n      username: {{username}}\n</code></pre> <ol> <li>[Optional] Recipe description, for documentation purposes</li> <li>[Required] Relative link to the recipe's <code>YAML</code> file</li> <li>[Optional] Alternative working directory. This is required to avoid    breaking relative links, when embedding a recipe from another location.</li> <li>[Optional] Substition variables</li> </ol>"},{"location":"actions/recipe/#implementation","title":"Implementation","text":""},{"location":"actions/recipe/#simple_cdd_yaml.actions.RecipeAction","title":"<code>RecipeAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Recipe action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class RecipeAction(Action):\n    \"\"\" Recipe action \"\"\"\n    def __init__(self, args_dict):\n        super().__init__(args_dict)\n        self.args_dict = args_dict\n        self.actions = {\n            'conf': ConfAction,\n            'preseed': PreseedAction,\n            'apt': AptAction,\n            'overlay': OverlayAction,\n            'run': RunAction,\n            'extra': ExtraAction,\n            'downloads': DownloadsAction,\n            'recipe': RecipeAction,\n            'debos': DebosAction,\n        }\n\n    def create_action(self, action_type, args):\n        \"\"\" Create a new action \"\"\"\n        try:\n            return self.actions[action_type](args)\n        except KeyError as exc:\n            raise KeyError('Unknown action type!') from exc\n\n    def _load_recipe(self, filename, substitutions=None):\n        \"\"\" Load the yaml recipe \"\"\"\n        recipe_file = self.input_dir / filename\n        full_yaml = load_yaml(recipe_file, substitutions)\n        return full_yaml['actions']\n\n    def _working_dir(self, props):\n        \"\"\" Define the recipe's working dir \"\"\"\n        if working_dir := props.get('working_dir'):\n            self.input_dir = pl.Path(working_dir)\n\n    def _get_args(self, props):\n        \"\"\" Get input arguments \"\"\"\n        if working_dir := props.get('working_dir'):\n            return dict(self.args_dict, input=working_dir)\n        return dict(self.args_dict)\n\n    def process_actions(self, props):\n        \"\"\" Perform all actions contained in the recipe \"\"\"\n        self._working_dir(props)\n        recipe_filename =  props['recipe']\n        substitutions = props.get('variables')\n        recipe = self._load_recipe(recipe_filename, substitutions)\n        args_dict = self._get_args(props)\n        for action_props in recipe:\n            action_type = action_props['action']\n            action = self.create_action(action_type, args_dict)\n            action.execute(action_props)\n            self.combine_results(action.result)\n\n    def perform_debos_action(self, props):\n        self.process_actions(props)\n\n    def perform_action(self, props):\n        self.process_actions(props)\n\n    def get_result(self):\n        \"\"\" Return results dictionary \"\"\"\n        return self.result\n</code></pre>"},{"location":"actions/run/","title":"Run Action","text":"<p>The <code>run</code> action actions allows to either run a script or a command. The corresponding code is automatically appended to <code>&lt;profile&gt;.postinst</code>. This script or command is executed by root by default. However, it's also possible to have another user execute the command. The script may contain <code>jinja</code> variables, that are substituted using provided substition variables.</p> <p>Info</p> <p>It's not possible to combine a script and command in one single <code>run</code> action. In other words, the <code>command</code> and <code>script</code> keywords are mutually exclusive.</p>"},{"location":"actions/run/#usage","title":"Usage","text":"<p>Click on the  to learn more about the action's options.</p> Run Action (command)<pre><code>{% set username=username or \"user\" -%}\n\nactions:\n  - action: run\n    description: Add {{username}} to sudoers #(1)!\n    variables: #(2)!\n      username: {{username}}\n    script: scripts/add_sudoer.sh  #(3)!\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Optional] Substition variables</li> <li>[Required] Relative link to the script file. Mutually exclusive with the    <code>command</code> keyword.</li> </ol> Run Action (script)<pre><code>  - action: run\n    description: Make sure debian UEFI file is registered as boot entry #(1)!\n    user: {{username}} # (2)!\n    command: | # (3)!\n      grub-install --efi-directory /boot/efi --force-extra-removable --recheck\n      &amp;&amp; update-grub\n</code></pre> <ol> <li>[Optional] Description, for documentation purposes</li> <li>[Optional] User that executes the command. If omitted, the command is    executed by root.</li> <li>[Required] The command to be executed. Mutually exclusive with the    <code>script</code> keyword.</li> </ol>"},{"location":"actions/run/#implementation","title":"Implementation","text":""},{"location":"actions/run/#simple_cdd_yaml.actions.RunAction","title":"<code>RunAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Run action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class RunAction(Action):\n    \"\"\" Run action \"\"\"\n    action_out = 'postinst'\n\n    def script(self, props):\n        \"\"\" Shell commands to run a script \"\"\"\n        description = props.get('description', 'Run script')\n        script = self._read_substitute(props['script'],\n                                       props.get('variables', {}))\n        script = re.sub(r'#!/bin/.*?sh\\n', '', script)\n        return f'\\n# {description}\\n{script}\\n'\n\n    def command(self, props):\n        \"\"\" Shell code to run a command \"\"\"\n        description = props.get('description', 'Run command')\n        template = jinja2.Template(props['command'])\n        command = template.render(props.get('variables', {}))\n        if user:= props.get('user'):\n            command = f\"su - {user} &lt;&lt; 'EOF'\\n{command}\\nEOF\"\n        return f'\\n# {description}\\n{command}\\n'\n\n    def create_run_script(self, props):\n        \"\"\" Create script from run action \"\"\"\n        if all(x in props for x in ['script', 'command']):\n            raise ActionError('Too many keywords: script and command found!')\n        if 'script' in props:\n            return self.script(props)\n        if 'command' in props:\n            return self.command(props)\n        raise ActionError('Missing script or command keyword!')\n\n    def perform_action(self, props):\n        return self.create_run_script(props)\n\n    def perform_debos_action(self, props):\n        if 'postprocess' in props:\n            self.append_result(props)\n            return\n        script_str = '#!/bin/sh' + self.create_run_script(props)\n        filename = self.unique_filename(description=props.get('description'))\n        output_file = self.debos_output_dir / 'scripts' / filename\n        with open(output_file, mode='w', encoding='utf-8') as file:\n            file.write(script_str)\n        debos_action = dict(SCRIPT_TEMPLATE_DICT,\n            description=props.get('description', 'Script'),\n            script='scripts/'+filename,\n        )\n        self.append_result(debos_action)\n</code></pre>"},{"location":"build-images/","title":"Build images","text":"<p>While this documenation is mostly about Simple-CDD-YAML, this section also provides some advices for building and testing images with Simple-CDD from the profiles that simple-CDD-YAML created.</p> <p>This includes building standard Simple-CDD images inside a docker container (these include the Debian installer) and testing them with Qemu. It also includes the creation of ready-to-go images built with Debos (without the installer), that can be used for quickly testing the image's functionality e.g. in a VM.</p>"},{"location":"build-images/build-in-docker/","title":"Build in Docker","text":"<p>To make sure that the host system configuration does not interfere with a simple-CDD build, it's useful to build the image inside a docker container. The following lists instructions to setup such a docker image.</p>"},{"location":"build-images/build-in-docker/#install-and-configure-docker","title":"Install and configure docker","text":"<p>First, install and configure docker. Please refer to the script setup_docker.sh on how to do this.</p>"},{"location":"build-images/build-in-docker/#dockerfile","title":"Dockerfile","text":"<p>First create a file called <code>Dockerfile</code> with the contents below. Replace <code>&lt;dist&gt;</code> with the Debian version for which you'd like to build your image, e.g. <code>buster</code>, <code>bullseye</code> or <code>bookworm</code>:</p> <pre><code>FROM debian:&lt;dist&gt;-slim\n\nRUN apt-get update\nRUN apt-get -y install --install-recommends xorriso gpg distro-info-data wget\n\nRUN wget https://deb.debian.org/debian/pool/main/s/simple-cdd/simple-cdd_0.6.10_all.deb\nRUN wget https://deb.debian.org/debian/pool/main/s/simple-cdd/python3-simple-cdd_0.6.10_all.deb\nRUN apt-get -y install ./simple-cdd_0.6.10_all.deb ./python3-simple-cdd_0.6.10_all.deb\n#(1)!\n\nRUN useradd -ms /bin/bash user\nUSER user\nWORKDIR /home/user\n</code></pre> <ol> <li>Simple-CDD v0.6.9 contains a bug, which has been resolved in v0.6.10.    Unfortunately, the Trixie repositories still contain v0.6.9. Therefore, we install the newer version manually.</li> </ol>"},{"location":"build-images/build-in-docker/#build-docker-image","title":"Build docker image","text":"<p>Build the docker image with the following command (again replace <code>&lt;dist&gt;</code>): <pre><code>docker build -t &lt;dist&gt;-simple-cdd .\n</code></pre></p>"},{"location":"build-images/build-in-docker/#call-simple-cdd-inside-docker","title":"Call simple-cdd inside docker","text":"<p>For repeated build attempts, it makes sense to wrap the dockerized simple-CDD call into a bash script e.g. called <code>docker_simple_cdd</code> (don't forget to replace <code>&lt;dist&gt;</code> and make the script executable using <code>chmod +x docker_simple_cdd</code>): <pre><code>#!/bin/bash\nARGS=\"$@\"\ndocker run -it --mount \"type=bind,source=$(pwd),destination=/home/user\" &lt;dist&gt;-simple-cdd /bin/sh -c \"simple-cdd $ARGS\"\n</code></pre></p> <p>Now you can build an image e.g. from the desktop profile by issuing:</p> <pre><code>./docker_simple_cdd --profiles desktop\n</code></pre>"},{"location":"build-images/build-with-debos/","title":"Build with Debos","text":"<p>While the test method with Qemu tests all installation image functionalities, it can be quite time consuming. An alternative approach is to generate a debos recipe from a Simple-CDD-YAML recipe and build and test its resulting image. Building a debos image is generally much quicker and once built, does not perform an installation process. Instead, the image can be tested straight away.</p> <p>To generate a debos recipe, e.g. for the <code>desktop</code> recipe, issue the following:</p> <pre><code>simple-cdd-yaml --recipe recipes/desktop.yaml --debos\n</code></pre> <p>This will create debos recipe <code>desktop.yaml</code> along with all required scripts and overlays in the <code>debos/desktop</code> directory.</p> <p>To build the image, move into this directory and build using: <pre><code>debos -m 8192MB --debug-shell desktop.yaml\n</code></pre> Note that, depending on the recipe, the increased memory argument (<code>-m 8192MB</code>) might not be required. </p> <p>After the image has been built successfully, it can be tested by starting it in a Qemu environment, e.g. using the following command.</p> <p><pre><code>qemu-system-x86_64 \\\n    -m 2048 \\\n    -enable-kvm \\\n    -cpu host \\\n    -drive if=pflash,format=raw,readonly=on,file=/usr/share/ovmf/OVMF.fd \\\n    -drive if=virtio,format=qcow2,cache=unsafe,file=debian-bookworm-amd64.qcow2\n</code></pre> Please note that, depending on the recipe, the image name <code>debian-bookworm-amd64.qcow2</code> might be different.</p>"},{"location":"build-images/test-on-qemu-with-uefi/","title":"Test on Qemu with UEFI","text":"<p>The exemplary desktop recipe creates a Simple-CDD profile for an UEFI capable desktop system. While Simple-CDD offers a qemu option to test the installation of a CD or DVD created with Simple-CDD, it does not support UEFI. The following shows how to boot a Qemu with UEFI support in order to test the installation in EFI mode. </p>"},{"location":"build-images/test-on-qemu-with-uefi/#prerequisites","title":"Prerequisites","text":"<p>The following setup is meant for Debian systems and was tested on Debian Bullseye.</p>"},{"location":"build-images/test-on-qemu-with-uefi/#preparations","title":"Preparations","text":"<p>In order to be able to build an ISO image, first install the required packages for Simple-CDD: <pre><code>sudo apt install simple-cdd xorriso\n</code></pre> Then build an image from the desktop profile: <pre><code>build-simple-cdd --profiles desktop\n</code></pre> This should produce an ISO file in the folder <code>images</code>.</p> <p>Please refer to the Simple-CDD website and the corresponding Debian Wiki Simple-CDD Howto page for more information.</p>"},{"location":"build-images/test-on-qemu-with-uefi/#setup-qemu","title":"Setup Qemu","text":"<p>To test the installation image Qemu can be used. Install the required packages using: <pre><code>sudo apt install qemu-utils qemu-system-x86 ovmf qemu-system-gui\n</code></pre> The package <code>ovmf</code> is required for UEFI support.</p> <p>Now create some images for testing, e.g. <pre><code>qemu-img create -f qcow2 disk.qcow2 10G\nqemu-img create -f qcow2 second_disk.qcow2 10G\n</code></pre> Create a bash script stored as <code>image_run</code> with the following contents (don't forget to make it executable using <code>chmod +x image_run</code>)</p> <pre><code>#!/bin/bash\nif [ $# -eq 0 ] ; then\n    cdrom=\"-boot c\"\nelse\n    cdrom=\"-boot d -drive media=cdrom,readonly=on,file=${1}\"\nfi\nqemu-system-x86_64 \\\n    -m 2048 \\\n    -enable-kvm \\\n    -cpu host \\\n    ${cdrom} \\\n    -drive if=pflash,format=raw,readonly=on,file=/usr/share/ovmf/OVMF.fd \\\n    -drive format=qcow2,file=disk.qcow2 \\\n    -drive format=qcow2,file=second_disk.qcow2\n</code></pre>"},{"location":"build-images/test-on-qemu-with-uefi/#testing-using-qemu","title":"Testing using Qemu","text":"<p>Test the Simple-CDD installation by issuing (replace <code>&lt;simple-cdd-iso&gt;</code> with the iso file as created by Simple-CDD): <pre><code>./image_run images/&lt;simple-cdd-iso&gt;\n</code></pre> After the installation has been completed succesfully, test out the installed desktop system using </p> <pre><code>./image_run\n</code></pre>"},{"location":"reference/","title":"Code Reference","text":"<p>Code reference documentation of Simple-CDD-YAML.</p> <p>Navigate through the menu, to query the different modules of the code.</p>"},{"location":"reference/actions/","title":"Actions","text":"<p>Action handlers for Simple-cdd-yaml recipes</p>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action","title":"<code>Action</code>","text":"<p>Abstract action base class</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class Action:\n    \"\"\" Abstract action base class \"\"\"\n    action_out = None\n\n    def __init__(self, args_dict):\n        self.profile = args_dict['profile']\n        self.input_dir = pl.Path(args_dict['input'])\n        self.output_dir = pl.Path(args_dict['output'])\n        self.debos = args_dict['debos']\n        self.debos_output_dir = pl.Path(args_dict['debos_output']) / self.profile\n        self.result = {\n            'architecture': '',\n            'chroot_default': False,\n            'actions': [], \n            'pre-actions': [], \n            'post-actions': [],\n        }\n\n    @staticmethod\n    def _print(text, header=None, width=68):\n        \"\"\" Print text wrapped \"\"\"\n        initial_indent = ' '\n        if header:\n            print(f' {header}')\n            initial_indent = '  '\n        wrapped_text = textwrap.wrap(\n            text,\n            width=width,\n            initial_indent=initial_indent,\n            subsequent_indent='  ',\n            break_on_hyphens=False,\n        )\n        print('\\n'.join(wrapped_text))\n\n    def _action_inform(self, props):\n        \"\"\" Inform on action start action status \"\"\"\n        if action_type := props.get('action'):\n            print(f' {action_type} action '.upper().center(70, '='))\n        if description := props.get('description'):\n            self._print(f'Description: {description}')\n        for src_file in ('recipe', 'preconf', 'source', 'command', 'script'):\n            if src := props.get(src_file):\n                self._print(f'{src_file.capitalize()}: {src}')\n\n    def _read_substitute(self, filename, substitutions):\n        \"\"\" Read string from file and perform jinja2 substitutions \"\"\"\n        input_file = self.input_dir / filename\n        with open(input_file, mode='r', encoding='utf-8') as file:\n            template = jinja2.Template(file.read())\n        return template.render(substitutions)\n\n    def _write_action(self, string, extension, directory='profiles',\n                      no_duplicate=False):\n        \"\"\" Append string to profile file \"\"\"\n        filename = self.profile + '.' + extension\n        output_file = self.output_dir / directory / filename\n        if no_duplicate and output_file.is_file():\n            with open(output_file, mode='r', encoding='utf-8') as file:\n                if string in file.read():\n                    return\n        with open(output_file, mode='a', encoding='utf-8') as file:\n            file.write(string)\n\n    def perform_action(self, props):\n        \"\"\" Perform the action specific tasks and return result \"\"\"\n        raise NotImplementedError('Action is an abstract base class!')\n\n    def perform_debos_action(self, props):\n        \"\"\" Process debos action specific tasks and return result \"\"\"\n        raise NotImplementedError('Action is an abstract base class!')\n\n    def execute(self, props):\n        \"\"\" Execute an action \"\"\"\n        self._action_inform(props)\n        if self.debos:\n            result = self.perform_debos_action(props)\n        else:\n            result = self.perform_action(props)\n        if result:\n            if not self.action_out:\n                self.action_out = props['action']\n            self._write_action(result, self.action_out)\n\n    def append_result(self, new_result: dict, key='actions'):\n        \"\"\" Append a new result to the result list \"\"\"\n        added_result = copy.deepcopy(new_result)\n        self.result[key].append(added_result)\n\n    def extend_result(self, new_result: dict, key='actions'):\n        \"\"\" Append a new result to the result list \"\"\"\n        added_result = copy.deepcopy(new_result)\n        self.result[key].extend(added_result)\n\n    def prepend_result(self, new_result: dict, key='actions'):\n        \"\"\" Prepend a new result to the result list \"\"\"\n        added_result = copy.deepcopy(new_result)\n        self.result[key].insert(0, added_result)\n\n    def combine_results(self, result):\n        \"\"\" Combine two result sets \"\"\"\n        for key in ('actions', 'pre-actions', 'post-actions'):\n            self.result[key].extend(result[key])\n        for option in ('architecture', 'chroot_default'):\n            if result.get(option):\n                self.result[option] = result[option]\n\n    def unique_filename(self, base='script', ext='sh', description=None):\n        \"\"\" Create a name from description or using uuid \"\"\"\n        name = base + '_'\n        if description:\n            name += description.lower()\n        else:\n            name += str(uuid.uuid4().hex)\n        return \"\".join([x if x.isalnum() else \"_\" for x in name]) + '.' + ext\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action.append_result","title":"<code>append_result(new_result, key='actions')</code>","text":"<p>Append a new result to the result list</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def append_result(self, new_result: dict, key='actions'):\n    \"\"\" Append a new result to the result list \"\"\"\n    added_result = copy.deepcopy(new_result)\n    self.result[key].append(added_result)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action.combine_results","title":"<code>combine_results(result)</code>","text":"<p>Combine two result sets</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def combine_results(self, result):\n    \"\"\" Combine two result sets \"\"\"\n    for key in ('actions', 'pre-actions', 'post-actions'):\n        self.result[key].extend(result[key])\n    for option in ('architecture', 'chroot_default'):\n        if result.get(option):\n            self.result[option] = result[option]\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action.execute","title":"<code>execute(props)</code>","text":"<p>Execute an action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def execute(self, props):\n    \"\"\" Execute an action \"\"\"\n    self._action_inform(props)\n    if self.debos:\n        result = self.perform_debos_action(props)\n    else:\n        result = self.perform_action(props)\n    if result:\n        if not self.action_out:\n            self.action_out = props['action']\n        self._write_action(result, self.action_out)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action.extend_result","title":"<code>extend_result(new_result, key='actions')</code>","text":"<p>Append a new result to the result list</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def extend_result(self, new_result: dict, key='actions'):\n    \"\"\" Append a new result to the result list \"\"\"\n    added_result = copy.deepcopy(new_result)\n    self.result[key].extend(added_result)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action.perform_action","title":"<code>perform_action(props)</code>","text":"<p>Perform the action specific tasks and return result</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def perform_action(self, props):\n    \"\"\" Perform the action specific tasks and return result \"\"\"\n    raise NotImplementedError('Action is an abstract base class!')\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action.perform_debos_action","title":"<code>perform_debos_action(props)</code>","text":"<p>Process debos action specific tasks and return result</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def perform_debos_action(self, props):\n    \"\"\" Process debos action specific tasks and return result \"\"\"\n    raise NotImplementedError('Action is an abstract base class!')\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action.prepend_result","title":"<code>prepend_result(new_result, key='actions')</code>","text":"<p>Prepend a new result to the result list</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def prepend_result(self, new_result: dict, key='actions'):\n    \"\"\" Prepend a new result to the result list \"\"\"\n    added_result = copy.deepcopy(new_result)\n    self.result[key].insert(0, added_result)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.Action.unique_filename","title":"<code>unique_filename(base='script', ext='sh', description=None)</code>","text":"<p>Create a name from description or using uuid</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def unique_filename(self, base='script', ext='sh', description=None):\n    \"\"\" Create a name from description or using uuid \"\"\"\n    name = base + '_'\n    if description:\n        name += description.lower()\n    else:\n        name += str(uuid.uuid4().hex)\n    return \"\".join([x if x.isalnum() else \"_\" for x in name]) + '.' + ext\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.ActionError","title":"<code>ActionError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when something goes wrong in an action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class ActionError(Exception):\n    \"\"\" Raised when something goes wrong in an action \"\"\"\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.AptAction","title":"<code>AptAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Apt action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class AptAction(Action):\n    \"\"\" Apt action \"\"\"\n    action_out = 'packages'\n\n    def __init__(self, args):\n        super().__init__(args)\n        self.packages_template = jinja2.Template(PACKAGES_TEMPLATE_STR)\n        self.all_pkgs = set()\n\n    def perform_action(self, props):\n        \"\"\" Process APT action \"\"\"\n        if packages := props.get('packages'):\n            pkg_list = ' '.join(packages)\n            self._print(pkg_list, header='Requested packages:')\n            description = props.get('description', 'Install packages')\n            if props.get('scripted', False):\n                apt_install_script = self.packages_template.render(\n                    description=description,\n                    pkg_list=pkg_list)\n                self._write_action(apt_install_script, extension='postinst')\n                return None\n            packages.insert(0, '# ' + description)\n            return '\\n'.join(packages) + '\\n\\n'\n        return None\n\n    def perform_debos_action(self, props):\n        self.append_result(props)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.AptAction.perform_action","title":"<code>perform_action(props)</code>","text":"<p>Process APT action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def perform_action(self, props):\n    \"\"\" Process APT action \"\"\"\n    if packages := props.get('packages'):\n        pkg_list = ' '.join(packages)\n        self._print(pkg_list, header='Requested packages:')\n        description = props.get('description', 'Install packages')\n        if props.get('scripted', False):\n            apt_install_script = self.packages_template.render(\n                description=description,\n                pkg_list=pkg_list)\n            self._write_action(apt_install_script, extension='postinst')\n            return None\n        packages.insert(0, '# ' + description)\n        return '\\n'.join(packages) + '\\n\\n'\n    return None\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.ConfAction","title":"<code>ConfAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Conf action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class ConfAction(Action):\n    \"\"\" Conf action \"\"\"\n\n    @staticmethod\n    def _handle_value(value):\n        \"\"\" Remove trailing spaces and make sure values are strings \"\"\"\n        if isinstance(value, str):\n            return value.rstrip()\n        return ''\n\n    def perform_action(self, props):\n        description = props.get('description', 'Conf settings')\n        conf_str = f'# {description}\\n'\n        if variables := props.get('variables'):\n            for var, value in variables.items():\n                conf_str += f'{var}=\"{self._handle_value(value)}\"\\n'\n        if env_variables := props.get('env_variables'):\n            for var, value in env_variables.items():\n                conf_str += f'export {var}=\"{self._handle_value(value)}\"\\n'\n        if variables or env_variables:\n            return conf_str\n        return None\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.DebosAction","title":"<code>DebosAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Debos action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class DebosAction(Action):\n    \"\"\" Debos action \"\"\"\n    def __init__(self, args_dict):\n        super().__init__(args_dict)\n        self.args_dict = args_dict\n        self.actions = {\n            'overlay': OverlayAction,\n            'run': RunAction,\n        }\n\n    def create_action(self, action_type, args):\n        \"\"\" Create a new action \"\"\"\n        try:\n            return self.actions[action_type](args)\n        except KeyError:\n            return None\n\n    def process_actions(self, action_list, action_key):\n        \"\"\" Process given list of actions \"\"\"\n        for action_props in action_list:\n            action_type = action_props['action']\n            action = self.create_action(action_type, self.args_dict)\n            if action:\n                action.execute(action_props)\n                self.extend_result(action.result['actions'], key=action_key)\n            else:\n                self.append_result(action_props, key=action_key)\n\n    def perform_action(self, props):\n        return None\n\n    def perform_debos_action(self, props):\n        for option in ('architecture', 'chroot_default'):\n            self.result[option] = props[option]    \n        for debos_action_type in ('pre-actions', 'post-actions'):\n            self.process_actions(props[debos_action_type], debos_action_type)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.DebosAction.create_action","title":"<code>create_action(action_type, args)</code>","text":"<p>Create a new action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def create_action(self, action_type, args):\n    \"\"\" Create a new action \"\"\"\n    try:\n        return self.actions[action_type](args)\n    except KeyError:\n        return None\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.DebosAction.process_actions","title":"<code>process_actions(action_list, action_key)</code>","text":"<p>Process given list of actions</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def process_actions(self, action_list, action_key):\n    \"\"\" Process given list of actions \"\"\"\n    for action_props in action_list:\n        action_type = action_props['action']\n        action = self.create_action(action_type, self.args_dict)\n        if action:\n            action.execute(action_props)\n            self.extend_result(action.result['actions'], key=action_key)\n        else:\n            self.append_result(action_props, key=action_key)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.DownloadsAction","title":"<code>DownloadsAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Downloads action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class DownloadsAction(Action):\n    \"\"\" Downloads action \"\"\"\n    def perform_action(self, props):\n        description = props.get('description', 'Additional packages')\n        pkg_list = props['packages']\n        self._print(' '.join(pkg_list), header='Extra packages:')\n        downloads_pkg_list = '\\n'.join(pkg_list)\n        return f'# {description}\\n{downloads_pkg_list}\\n'\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.ExtraAction","title":"<code>ExtraAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Extra action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class ExtraAction(Action):\n    \"\"\" Extra action \"\"\"\n    def perform_action(self, props):\n        description = props.get('description', 'Extra files')\n        self._write_action(f'# {description}\\n', extension='extra')\n        extra_files = []\n        for file in props['files']:\n            src = pl.Path(file)\n            dst = self.output_dir / 'extra' / src.name\n            shutil.copyfile(src, dst)\n            extra_files.append('extra/' + src.name)\n        self._print(' '.join(extra_files), header='Extra files:')\n        return '\\n'.join(extra_files) + '\\n'\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.OverlayAction","title":"<code>OverlayAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Overlay action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class OverlayAction(Action):\n    \"\"\" Overlay action \"\"\"\n    def __init__(self, args):\n        super().__init__(args)\n        self.overlay_template = jinja2.Template(OVERLAY_TEMPLATE_STR)\n\n    def source(self, props):\n        source = props['source']\n        if source.startswith('/'):\n            return pl.PurePath(source)\n        return pl.PurePath(self.input_dir / source)\n\n    def overlay_name(self, props):\n        overlay_name = props['source'].replace('/', '.')\n        if user := props.get('user'):\n            return f'{overlay_name}.{user}'\n        return overlay_name\n\n    def tar_filter(self, props):\n        if user := props.get('user'):\n            return OwnerTarFilter(user=user).tar_filter\n        return None\n\n    def destination(self, props):\n        \"\"\" If destination is provided, this overrules the user setting \"\"\"\n        if dest := props.get('destination'):\n            return dest\n        if user := props.get('user'):\n            if user == 'root':\n                return '/root/'\n            return f'/home/{user}/'\n        return '/'\n\n    def compress_overlay(self, props, output_dir):\n        \"\"\" Compress overlay into tarball \"\"\"\n        name = self.overlay_name(props)\n        filename = f'{self.profile}.{name}.tar.gz'\n        src = self.source(props)\n        tfilter = self.tar_filter(props)\n        with tarfile.open(output_dir / filename, \"w:gz\") as tar:\n            tar.add(src, arcname='', filter=tfilter)\n        dest = self.destination(props)\n        return filename, dest\n\n    def perform_action(self, props):\n        output_dir = self.output_dir / 'extra'\n        filename, destination = self.compress_overlay(props, output_dir)\n        self._write_action(f'extra/{filename}\\n', extension='extra',\n                           no_duplicate=True)\n        extract_commands = self.overlay_template.render(\n            description=props.get('description', 'Overlay'),\n            overlay=filename,\n            destination=destination,\n        )\n        self._write_action(extract_commands, extension='postinst')\n\n    def perform_debos_action(self, props):\n        output_dir = self.debos_output_dir / 'overlays'\n        filename, destination = self.compress_overlay(props, output_dir)\n        debos_action = dict(COMMAND_TEMPLATE_DICT,\n            description=props.get('description', 'Overlay'),\n            command=f'tar -xf $ARTIFACTDIR/overlays/{filename} -C $ROOTDIR{destination}'\n        )\n        self.append_result(debos_action)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.OverlayAction.compress_overlay","title":"<code>compress_overlay(props, output_dir)</code>","text":"<p>Compress overlay into tarball</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def compress_overlay(self, props, output_dir):\n    \"\"\" Compress overlay into tarball \"\"\"\n    name = self.overlay_name(props)\n    filename = f'{self.profile}.{name}.tar.gz'\n    src = self.source(props)\n    tfilter = self.tar_filter(props)\n    with tarfile.open(output_dir / filename, \"w:gz\") as tar:\n        tar.add(src, arcname='', filter=tfilter)\n    dest = self.destination(props)\n    return filename, dest\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.OverlayAction.destination","title":"<code>destination(props)</code>","text":"<p>If destination is provided, this overrules the user setting</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def destination(self, props):\n    \"\"\" If destination is provided, this overrules the user setting \"\"\"\n    if dest := props.get('destination'):\n        return dest\n    if user := props.get('user'):\n        if user == 'root':\n            return '/root/'\n        return f'/home/{user}/'\n    return '/'\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.OwnerTarFilter","title":"<code>OwnerTarFilter</code>","text":"<p>Parametrizable tar filer</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class OwnerTarFilter:\n    \"\"\" Parametrizable tar filer \"\"\"\n    def __init__(self, user, group=None):\n        self.user = self.group = user\n        if group:\n            self.group = group\n\n    def tar_filter(self, tarinfo : tarfile.TarInfo) -&gt; tarfile.TarInfo:\n        \"\"\" tar filter for modifying user/group name properties \"\"\"\n        tarinfo.uname = self.user\n        tarinfo.gname = self.group\n        return tarinfo\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.OwnerTarFilter.tar_filter","title":"<code>tar_filter(tarinfo)</code>","text":"<p>tar filter for modifying user/group name properties</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def tar_filter(self, tarinfo : tarfile.TarInfo) -&gt; tarfile.TarInfo:\n    \"\"\" tar filter for modifying user/group name properties \"\"\"\n    tarinfo.uname = self.user\n    tarinfo.gname = self.group\n    return tarinfo\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.PreseedAction","title":"<code>PreseedAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Preseed action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class PreseedAction(Action):\n    \"\"\" Preseed action \"\"\"\n    def perform_action(self, props):\n        return self._read_substitute(props['preconf'],\n                                     props.get('variables', {}))\n\n    def perform_debos_action(self, props):\n        return None\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.RecipeAction","title":"<code>RecipeAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Recipe action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class RecipeAction(Action):\n    \"\"\" Recipe action \"\"\"\n    def __init__(self, args_dict):\n        super().__init__(args_dict)\n        self.args_dict = args_dict\n        self.actions = {\n            'conf': ConfAction,\n            'preseed': PreseedAction,\n            'apt': AptAction,\n            'overlay': OverlayAction,\n            'run': RunAction,\n            'extra': ExtraAction,\n            'downloads': DownloadsAction,\n            'recipe': RecipeAction,\n            'debos': DebosAction,\n        }\n\n    def create_action(self, action_type, args):\n        \"\"\" Create a new action \"\"\"\n        try:\n            return self.actions[action_type](args)\n        except KeyError as exc:\n            raise KeyError('Unknown action type!') from exc\n\n    def _load_recipe(self, filename, substitutions=None):\n        \"\"\" Load the yaml recipe \"\"\"\n        recipe_file = self.input_dir / filename\n        full_yaml = load_yaml(recipe_file, substitutions)\n        return full_yaml['actions']\n\n    def _working_dir(self, props):\n        \"\"\" Define the recipe's working dir \"\"\"\n        if working_dir := props.get('working_dir'):\n            self.input_dir = pl.Path(working_dir)\n\n    def _get_args(self, props):\n        \"\"\" Get input arguments \"\"\"\n        if working_dir := props.get('working_dir'):\n            return dict(self.args_dict, input=working_dir)\n        return dict(self.args_dict)\n\n    def process_actions(self, props):\n        \"\"\" Perform all actions contained in the recipe \"\"\"\n        self._working_dir(props)\n        recipe_filename =  props['recipe']\n        substitutions = props.get('variables')\n        recipe = self._load_recipe(recipe_filename, substitutions)\n        args_dict = self._get_args(props)\n        for action_props in recipe:\n            action_type = action_props['action']\n            action = self.create_action(action_type, args_dict)\n            action.execute(action_props)\n            self.combine_results(action.result)\n\n    def perform_debos_action(self, props):\n        self.process_actions(props)\n\n    def perform_action(self, props):\n        self.process_actions(props)\n\n    def get_result(self):\n        \"\"\" Return results dictionary \"\"\"\n        return self.result\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.RecipeAction.create_action","title":"<code>create_action(action_type, args)</code>","text":"<p>Create a new action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def create_action(self, action_type, args):\n    \"\"\" Create a new action \"\"\"\n    try:\n        return self.actions[action_type](args)\n    except KeyError as exc:\n        raise KeyError('Unknown action type!') from exc\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.RecipeAction.get_result","title":"<code>get_result()</code>","text":"<p>Return results dictionary</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def get_result(self):\n    \"\"\" Return results dictionary \"\"\"\n    return self.result\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.RecipeAction.process_actions","title":"<code>process_actions(props)</code>","text":"<p>Perform all actions contained in the recipe</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def process_actions(self, props):\n    \"\"\" Perform all actions contained in the recipe \"\"\"\n    self._working_dir(props)\n    recipe_filename =  props['recipe']\n    substitutions = props.get('variables')\n    recipe = self._load_recipe(recipe_filename, substitutions)\n    args_dict = self._get_args(props)\n    for action_props in recipe:\n        action_type = action_props['action']\n        action = self.create_action(action_type, args_dict)\n        action.execute(action_props)\n        self.combine_results(action.result)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.RunAction","title":"<code>RunAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Run action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>class RunAction(Action):\n    \"\"\" Run action \"\"\"\n    action_out = 'postinst'\n\n    def script(self, props):\n        \"\"\" Shell commands to run a script \"\"\"\n        description = props.get('description', 'Run script')\n        script = self._read_substitute(props['script'],\n                                       props.get('variables', {}))\n        script = re.sub(r'#!/bin/.*?sh\\n', '', script)\n        return f'\\n# {description}\\n{script}\\n'\n\n    def command(self, props):\n        \"\"\" Shell code to run a command \"\"\"\n        description = props.get('description', 'Run command')\n        template = jinja2.Template(props['command'])\n        command = template.render(props.get('variables', {}))\n        if user:= props.get('user'):\n            command = f\"su - {user} &lt;&lt; 'EOF'\\n{command}\\nEOF\"\n        return f'\\n# {description}\\n{command}\\n'\n\n    def create_run_script(self, props):\n        \"\"\" Create script from run action \"\"\"\n        if all(x in props for x in ['script', 'command']):\n            raise ActionError('Too many keywords: script and command found!')\n        if 'script' in props:\n            return self.script(props)\n        if 'command' in props:\n            return self.command(props)\n        raise ActionError('Missing script or command keyword!')\n\n    def perform_action(self, props):\n        return self.create_run_script(props)\n\n    def perform_debos_action(self, props):\n        if 'postprocess' in props:\n            self.append_result(props)\n            return\n        script_str = '#!/bin/sh' + self.create_run_script(props)\n        filename = self.unique_filename(description=props.get('description'))\n        output_file = self.debos_output_dir / 'scripts' / filename\n        with open(output_file, mode='w', encoding='utf-8') as file:\n            file.write(script_str)\n        debos_action = dict(SCRIPT_TEMPLATE_DICT,\n            description=props.get('description', 'Script'),\n            script='scripts/'+filename,\n        )\n        self.append_result(debos_action)\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.RunAction.command","title":"<code>command(props)</code>","text":"<p>Shell code to run a command</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def command(self, props):\n    \"\"\" Shell code to run a command \"\"\"\n    description = props.get('description', 'Run command')\n    template = jinja2.Template(props['command'])\n    command = template.render(props.get('variables', {}))\n    if user:= props.get('user'):\n        command = f\"su - {user} &lt;&lt; 'EOF'\\n{command}\\nEOF\"\n    return f'\\n# {description}\\n{command}\\n'\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.RunAction.create_run_script","title":"<code>create_run_script(props)</code>","text":"<p>Create script from run action</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def create_run_script(self, props):\n    \"\"\" Create script from run action \"\"\"\n    if all(x in props for x in ['script', 'command']):\n        raise ActionError('Too many keywords: script and command found!')\n    if 'script' in props:\n        return self.script(props)\n    if 'command' in props:\n        return self.command(props)\n    raise ActionError('Missing script or command keyword!')\n</code></pre>"},{"location":"reference/actions/#simple_cdd_yaml.actions.RunAction.script","title":"<code>script(props)</code>","text":"<p>Shell commands to run a script</p> Source code in <code>simple_cdd_yaml/actions.py</code> <pre><code>def script(self, props):\n    \"\"\" Shell commands to run a script \"\"\"\n    description = props.get('description', 'Run script')\n    script = self._read_substitute(props['script'],\n                                   props.get('variables', {}))\n    script = re.sub(r'#!/bin/.*?sh\\n', '', script)\n    return f'\\n# {description}\\n{script}\\n'\n</code></pre>"},{"location":"reference/recipe_interpreter/","title":"Recipe Interpreter","text":"<p>YAML recipe interpreter module</p>"},{"location":"reference/recipe_interpreter/#simple_cdd_yaml.recipe_interpreter.ProfileException","title":"<code>ProfileException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when profile has not been defined</p> Source code in <code>simple_cdd_yaml/recipe_interpreter.py</code> <pre><code>class ProfileException(Exception):\n    \"\"\" Raised when profile has not been defined \"\"\"\n</code></pre>"},{"location":"reference/recipe_interpreter/#simple_cdd_yaml.recipe_interpreter.YamlRecipeInterpreter","title":"<code>YamlRecipeInterpreter</code>","text":"<p>Yaml recipe interpreter for simple-cdd</p> Source code in <code>simple_cdd_yaml/recipe_interpreter.py</code> <pre><code>class YamlRecipeInterpreter():\n    \"\"\" Yaml recipe interpreter for simple-cdd \"\"\"\n    def __init__(self, args):\n        self.recipe_file = args.recipe\n        self.profile = self.find_profile_name(args)\n        self.output_dir = pl.Path(args.output)\n        self.postinst_template = jinja2.Template(POSTINST_TEMPLATE_STR)\n        self.debos = args.debos\n        self.debos_output_dir = pl.Path(args.debos_output) / self.profile\n        self.recipe_vars = args.recipe_vars\n        self.recipe_action = actions.RecipeAction(vars(args))\n\n    def _recipe_props(self):\n        \"\"\" Get root recipe properties \"\"\"\n        return {\n            'action': 'recipe',\n            'description': f'Load {self.profile} recipe',\n            'recipe': self.recipe_file,\n            'variables': dict(self.recipe_vars, debos=self.debos),\n        }\n\n    def _recipe_closing(self):\n        \"\"\" Print out recipe closing statement \"\"\"\n        print(''.center(70, '='))\n        print(' Recipe done.')\n\n    def find_profile_name(self, args):\n        \"\"\" Try to find profile name \"\"\"\n        full_yaml = yt.load_yaml(self.recipe_file)\n        if profile := full_yaml.get('profile'):\n            args.profile = profile\n            return profile\n        if args.profile:\n            return args.profile\n        raise ProfileException('Profile not defined or found in recipe file!')\n\n    def generate_profile(self):\n        \"\"\" Generate simple-cdd profile output \"\"\"\n        self._clear_profile()\n        self.recipe_action.execute(self._recipe_props())\n        self._recipe_closing()\n\n    def generate_debos_recipe(self):\n        \"\"\" Generate and obtain results dict and output to debos yaml recipe \"\"\"\n        self._clear_debos_recipe()\n        output_file = self.debos_output_dir  / (self.profile + '.yaml')\n        self.recipe_action.execute(self._recipe_props())\n        result_dict = self.recipe_action.get_result()\n        debos_recipe = {\n            'architecture': result_dict['architecture'], \n            'actions': [],\n        }\n        for action_list in ('pre-actions', 'actions', 'post-actions'):\n            debos_recipe['actions'] += result_dict[action_list]\n        if result_dict.get('chroot_default'):\n            for item in debos_recipe['actions']:\n                if item.get('action') == 'run' and 'chroot' not in item and 'postprocess' not in item:\n                    item['chroot'] = True\n        yt.save_yaml(output_file, debos_recipe)\n        script_dir = self.debos_output_dir / 'scripts'\n        for file in script_dir.iterdir():\n            self._make_executable(file)\n        self._recipe_closing()\n\n    def _clear_profile(self):\n        \"\"\" Remove any pre-existing profile files in output directories \"\"\"\n        profiles_dir = self.output_dir / 'profiles'\n        profiles_dir.mkdir(parents=True, exist_ok=True)\n        wildcard = self.profile + '.*'\n        for file in profiles_dir.glob(wildcard):\n            file.unlink()\n        extra_dir = self.output_dir / 'extra'\n        extra_dir.mkdir(parents=True, exist_ok=True)\n        for file in extra_dir.glob(wildcard):\n            file.unlink()\n        postinst_str = self.postinst_template.render(profile=self.profile)\n        self._write_action(postinst_str, 'postinst')\n        self._make_executable(profiles_dir / (self.profile + '.postinst'))\n\n    def _write_action(self, string, extension, directory='profiles'):\n        \"\"\" Append string to profile file \"\"\"\n        filename = self.profile + '.' + extension\n        output_file = self.output_dir / directory / filename\n        with open(output_file, mode='a', encoding='utf-8') as file:\n            file.write(string)\n\n    def _clear_debos_recipe(self):\n        debos_dir = self.debos_output_dir\n        if debos_dir.is_dir():\n            shutil.rmtree(debos_dir)\n        self._create_dir(debos_dir)\n        self._create_dir(self.debos_output_dir / 'scripts')\n        self._create_dir(self.debos_output_dir / 'overlays')\n\n    @staticmethod\n    def _create_dir(pathlib_dir):\n        \"\"\" Creates a directory, even if it already exists \"\"\"\n        pathlib_dir.mkdir(parents=True, exist_ok=True)\n\n    @staticmethod\n    def _make_executable(file):\n        \"\"\" Adds executable permissions to file \"\"\"\n        file.chmod(file.stat().st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)\n</code></pre>"},{"location":"reference/recipe_interpreter/#simple_cdd_yaml.recipe_interpreter.YamlRecipeInterpreter.find_profile_name","title":"<code>find_profile_name(args)</code>","text":"<p>Try to find profile name</p> Source code in <code>simple_cdd_yaml/recipe_interpreter.py</code> <pre><code>def find_profile_name(self, args):\n    \"\"\" Try to find profile name \"\"\"\n    full_yaml = yt.load_yaml(self.recipe_file)\n    if profile := full_yaml.get('profile'):\n        args.profile = profile\n        return profile\n    if args.profile:\n        return args.profile\n    raise ProfileException('Profile not defined or found in recipe file!')\n</code></pre>"},{"location":"reference/recipe_interpreter/#simple_cdd_yaml.recipe_interpreter.YamlRecipeInterpreter.generate_debos_recipe","title":"<code>generate_debos_recipe()</code>","text":"<p>Generate and obtain results dict and output to debos yaml recipe</p> Source code in <code>simple_cdd_yaml/recipe_interpreter.py</code> <pre><code>def generate_debos_recipe(self):\n    \"\"\" Generate and obtain results dict and output to debos yaml recipe \"\"\"\n    self._clear_debos_recipe()\n    output_file = self.debos_output_dir  / (self.profile + '.yaml')\n    self.recipe_action.execute(self._recipe_props())\n    result_dict = self.recipe_action.get_result()\n    debos_recipe = {\n        'architecture': result_dict['architecture'], \n        'actions': [],\n    }\n    for action_list in ('pre-actions', 'actions', 'post-actions'):\n        debos_recipe['actions'] += result_dict[action_list]\n    if result_dict.get('chroot_default'):\n        for item in debos_recipe['actions']:\n            if item.get('action') == 'run' and 'chroot' not in item and 'postprocess' not in item:\n                item['chroot'] = True\n    yt.save_yaml(output_file, debos_recipe)\n    script_dir = self.debos_output_dir / 'scripts'\n    for file in script_dir.iterdir():\n        self._make_executable(file)\n    self._recipe_closing()\n</code></pre>"},{"location":"reference/recipe_interpreter/#simple_cdd_yaml.recipe_interpreter.YamlRecipeInterpreter.generate_profile","title":"<code>generate_profile()</code>","text":"<p>Generate simple-cdd profile output</p> Source code in <code>simple_cdd_yaml/recipe_interpreter.py</code> <pre><code>def generate_profile(self):\n    \"\"\" Generate simple-cdd profile output \"\"\"\n    self._clear_profile()\n    self.recipe_action.execute(self._recipe_props())\n    self._recipe_closing()\n</code></pre>"},{"location":"reference/simple_cdd_yaml/","title":"Simple-CDD-YAML","text":"<p>Simple-cdd YAML recipe interpreter</p>"},{"location":"reference/simple_cdd_yaml/#simple_cdd_yaml.simple_cdd_yaml.KeyValueParseAction","title":"<code>KeyValueParseAction</code>","text":"<p>               Bases: <code>Action</code></p> <p>Parse comma separated key=value pairs</p> Source code in <code>simple_cdd_yaml/simple_cdd_yaml.py</code> <pre><code>class KeyValueParseAction(argparse.Action):\n    \"\"\" Parse comma separated key=value pairs \"\"\"\n\n    def __call__(self, parser, namespace, values, option_string=None):\n        value_dict = {}\n        for item in values.split(','):\n            key, value = item.split('=')\n            value_dict[key] = value\n        setattr(namespace, self.dest, value_dict)\n</code></pre>"},{"location":"reference/simple_cdd_yaml/#simple_cdd_yaml.simple_cdd_yaml.main","title":"<code>main()</code>","text":"<p>Command line interface for Simple-CDD-Yaml</p> Source code in <code>simple_cdd_yaml/simple_cdd_yaml.py</code> <pre><code>def main():\n    \"\"\" Command line interface for Simple-CDD-Yaml \"\"\"\n    parser = argparse.ArgumentParser(description='Generate simple-cdd profiles using YAML input')\n    parser.add_argument('--recipe', type=str, required=True,\n                        help='set the config yaml file')\n    parser.add_argument('--profile', type=str, default=None,\n                        help='profile name')\n    parser.add_argument('--output', type=str, default='.',\n                        help='profile output directory (default: %(default)s)')\n    parser.add_argument('--input', type=str, default='.',\n                        help='recipe/action working directory (default: %(default)s)')\n    parser.add_argument('--debos', default=False, action='store_true',\n                        help='if provided, try to generate a debos recipe instead')\n    parser.add_argument('--debos-output', type=str, default='./debos',\n                        help='debos recipe output directory (default: %(default)s)')\n    parser.add_argument('--vars', dest='recipe_vars', action=KeyValueParseAction,\n                        default='', metavar='key1=value1,key2=value2,...',\n                        help='override root recipe variables')\n    try:\n        arguments = parser.parse_args()\n        if arguments.debos:\n            interp.YamlRecipeInterpreter(arguments).generate_debos_recipe()\n        else:\n            interp.YamlRecipeInterpreter(arguments).generate_profile()\n    except KeyboardInterrupt:\n        pass\n</code></pre>"},{"location":"reference/yaml_tools/","title":"YAML Tools","text":"<p>YAML loader module</p>"},{"location":"reference/yaml_tools/#simple_cdd_yaml.yaml_tools.LevelWhiteLineDumper","title":"<code>LevelWhiteLineDumper</code>","text":"<p>               Bases: <code>SafeDumper</code></p> <p>Adds white lines on below a given yaml object level</p> Source code in <code>simple_cdd_yaml/yaml_tools.py</code> <pre><code>class LevelWhiteLineDumper(yaml.SafeDumper):\n    \"\"\" Adds white lines on below a given yaml object level \"\"\"\n    level = 1\n\n    @classmethod\n    def set_level(cls, level):\n        \"\"\" Level below which white lines are included  \"\"\"\n        cls.level = level\n        return cls\n\n    def write_line_break(self, data=None):\n        super().write_line_break(data)\n        if len(self.indents) &lt; self.level + 1:\n            super().write_line_break()\n</code></pre>"},{"location":"reference/yaml_tools/#simple_cdd_yaml.yaml_tools.LevelWhiteLineDumper.set_level","title":"<code>set_level(level)</code>  <code>classmethod</code>","text":"<p>Level below which white lines are included</p> Source code in <code>simple_cdd_yaml/yaml_tools.py</code> <pre><code>@classmethod\ndef set_level(cls, level):\n    \"\"\" Level below which white lines are included  \"\"\"\n    cls.level = level\n    return cls\n</code></pre>"},{"location":"reference/yaml_tools/#simple_cdd_yaml.yaml_tools.NullUndefined","title":"<code>NullUndefined</code>","text":"<p>               Bases: <code>Undefined</code></p> <p>Jinja2 Undefined to parse jinja inside strings</p> Source code in <code>simple_cdd_yaml/yaml_tools.py</code> <pre><code>class NullUndefined(jinja2.Undefined):\n    \"\"\" Jinja2 Undefined to parse jinja inside strings \"\"\"\n    def __getattr__(self, key):\n        return ''\n</code></pre>"},{"location":"reference/yaml_tools/#simple_cdd_yaml.yaml_tools.load_yaml","title":"<code>load_yaml(file, substitutions=None)</code>","text":"<p>Load yaml file</p> Source code in <code>simple_cdd_yaml/yaml_tools.py</code> <pre><code>def load_yaml(file, substitutions=None):\n    \"\"\" Load yaml file \"\"\"\n    if substitutions is None:\n        substitutions = {}\n    with open(file, mode=\"r\", encoding=\"utf-8\") as data:\n        template = jinja2.Template(data.read(), undefined=NullUndefined)\n    rendered = template.render(substitutions)\n    return yaml.safe_load(rendered)\n</code></pre>"},{"location":"reference/yaml_tools/#simple_cdd_yaml.yaml_tools.save_yaml","title":"<code>save_yaml(filepath, yaml_dict)</code>","text":"<p>Store dictionary as yaml file</p> Source code in <code>simple_cdd_yaml/yaml_tools.py</code> <pre><code>def save_yaml(filepath, yaml_dict):\n    \"\"\" Store dictionary as yaml file \"\"\"\n    with open(filepath, mode='w+', encoding=\"utf-8\") as file:\n        yaml.dump(yaml_dict, file, Dumper=LevelWhiteLineDumper.set_level(2),\n                  allow_unicode=True, width=4096, sort_keys=False)\n</code></pre>"}]}